# Vagrant file will provision below things.

## Create 3 VM with ssh access provisioning

##  Installation (ubuntu)

sudo apt-get install software-properties-common
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update
sudo apt-get install ethereum -y

## Prepare the resources

### Create folders
$ mkdir -p ~/sample/data
$ mkdir -p ~/sample/init/scripts

### Put genesis block
$ cat <<'EOF' >>~/sample/init/genesis-n15.json
{
  "config": {
        "chainId": 15,
        "homesteadBlock": 0,
        "eip155Block": 0,
        "eip158Block": 0
    },
  "alloc"      : {},
  "coinbase"   : "0x0000000000000000000000000000000000000000",
  "difficulty" : "1",
  "extraData"  : "",
  "gasLimit"   : "100000",
  "nonce"      : "0x000000000123456",
  "mixhash"    : "0x0000000000000000000000000000000000000000000000000000000000000000",
  "parentHash" : "0x0000000000000000000000000000000000000000000000000000000000000000",
  "timestamp"  : "0x00"
}
EOF

### Put javascript to check balances of all local accounts
$ cat <<'EOF' >> ~/sample/init/scripts/geth_utils.js
function checkAllBalances() {
    var totalBal = 0;
    for (var acctNum in eth.accounts) {
        var acct = eth.accounts[acctNum];
        var acctBal = web3.fromWei(eth.getBalance(acct), "ether");
        totalBal += parseFloat(acctBal);
        console.log("  eth.accounts[" + acctNum + "]: \t" + acct + " \tbalance: " + acctBal + " ether");
    }
    console.log("  Total balance: " + totalBal + " ether");
};
EOF

## Init a database that uses above genesis block (all nodes MUST be the same)
$ geth --datadir ~/sample/data init ~/sample/init/genesis-n15.json


# Miner node

## Create new account 
$ geth --datadir ~/sample/data account new
### eg. 
  - acc0: 0xf1c05e4867ce94c2ea9e86839751c773c06dfa18   passphrase: xxx

## Start mining (and transfer Gas to the created account)
$ geth --datadir ~/sample/data --networkid 15 --etherbase '0xf1c05e4867ce94c2ea9e86839751c773c06dfa18' --mine

## waiting until 'Generating DAG' is completed.
### if 'Done generating DAG for epoch 0' that means ..... the difficalty has been setup is to high (just decrease and re-init or waiting)

## open javascript console of running mine (by attach process)
$ geth attach ipc:/home/amusikapan/sample/data/geth.ipc 

## import script from console 
> loadScript("/home/amusikapan/sample/scripts/geth_utils.js")

## call function in script 
> checkAllBalances();

## get node info (if another nodes need to connect)
> admin.nodeInfo

### Eg -> enode: "enode://c3a263bf9701f777e27b401f4372297182b1fdfccea45ac1f6785d1100868cca4f01b640887598f27471ce048287bea3bb4dcec7d7de3f87ef547fc9a4c0602a@[::]:30303")


# Node1

## create account 
$ geth --datadir ~/sample/data account new
### eg. 
  - acc: 0xcf6a800968a94f4d0408e3daf32be8767cc30aa6 , passphrase: xxx

## accessing boot node with the same networkid and access the console.
(from miner's enode so replace [::] with miner node's IP address)
$ geth --datadir ~/sample/data --networkid 15 --bootnodes enode://4947c74c60285b583396f6915c8f422c492a34855f9144dad5c808b0039691705e03589cee6a847824f14d7d99f2b581f3c2351e7f0586e0caf375a1744b228a@169.254.142.21:30303 console

# get balance 
> loadScript("/home/amusikapan/sample/scripts/geth_utils.js")
> checkAllBalances();


----------------- Transfer transaction from miner account to account in node1 -----------------
# note: 0.000000000000000001 eather = 1 wei
### from miner node ###
> var tx = {from: "0xf1c05e4867ce94c2ea9e86839751c773c06dfa18", to: "0xcf6a800968a94f4d0408e3daf32be8767cc30aa6", value: web3.toWei(100000, "wei")}
> personal.sendTransaction(tx, "xxx")

# get available balance (normally still be the same until transaction is completed)
> eth.getBalance("0xf1c05e4867ce94c2ea9e86839751c773c06dfa18")

# check pending Transactions
> txpool.content

# pending transaction depends on cpu, difficalty (changed everytimes block mined)
# send more !!
> var tx = {from: "0xf1c05e4867ce94c2ea9e86839751c773c06dfa18", to: "0xcf6a800968a94f4d0408e3daf32be8767cc30aa6", value: web3.toWei(0.00017, "ether")}
> personal.sendTransaction(tx, "xxx")
(if got the results -> "Error: exceeds block gas limit" so calculate the block capability again)

### from node1 ###
> eth.getBalance("0xcf6a800968a94f4d0408e3daf32be8767cc30aa6")


----------------- node2 connect to node1 (as bootnodes) -----------------

# prepare folders
$ mkdir -p ~/sample
$ mkdir -p ~/sample/data
$ mkdir -p ~/sample/scripts

# create account 
$ geth --datadir ~/sample/data account new
(acc: 0x317ced0422aefac3ba4e3b9e4efd5dfe6532af4d , passphrase: xxx)

# initial genesis as the same as miner node (genesis file must be the same as all nodes in the same network)
$ geth --datadir ~/sample/data init ~/sample/init/genesis-n15.json

# accessing boot node (can be any because there has discover protocol)
# from miner enode so replace [::] with miner node's IP addr 
$ geth --datadir ~/sample/data --networkid 15 --bootnodes enode://e642e27701b9625d21f71095dba93e4bb068101bd82dbea381b2e5504ad1928d55fd7fcd16fbc55cb2f77e444e9cc00f796fb1a66bd714ec09656f66d762195c@169.254.142.31:30303 console

# access javascript console
$ geth attach ipc:///home/amusikapan/sample/data/geth.ipc

# copy javascript from miner to same folder (can be different)
# get balance 
> loadScript("/home/amusikapan/sample/scripts/geth_utils.js")
> checkAllBalances();



-----------------  testing p2p by bring up node2  -----------------

# testing p2p concept by transfer transaction from miner's account to node2's account 
# from miner1 console
> var tx = {from: "0xf1c05e4867ce94c2ea9e86839751c773c06dfa18", to: "0x317ced0422aefac3ba4e3b9e4efd5dfe6532af4d", value: web3.toWei(100000, "wei")}
> personal.sendTransaction(tx, "xxx")

# from node2 console
> eth.getBalance("0x317ced0422aefac3ba4e3b9e4efd5dfe6532af4d")



# Learning steps Ref
1. https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum
2. https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts
3. https://github.com/ethereum/go-ethereum/wiki/Mining
   (javascrip console: https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console)
4. https://github.com/ethereum/go-ethereum/wiki/Contracts-and-Transactions

5. Networking 
   https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network
   https://github.com/ethereum/go-ethereum/wiki/Private-network
   https://github.com/ethereum/go-ethereum/wiki/Setting-up-private-network-or-local-cluster

6. https://github.com/ethereum/go-ethereum/wiki/Management-APIs
7. https://github.com/ethereum/go-ethereum/wiki/Backup-&-restore
8. https://medium.com/taipei-ethereum-meetup/beginners-guide-to-ethereum-3-explain-the-genesis-file-and-use-it-to-customize-your-blockchain-552eb6265145

## Other useful link 
- ether converter: https://etherconverter.online/